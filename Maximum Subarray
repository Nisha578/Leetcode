// 1st approach   (Kadane's alogrithm)

class Solution {
    public static int maxSubArray(int[] nums){   
       int sum = 0;
       int maxi = nums[0];

    for(int i = 0; i<nums.length; i++) {

        sum += nums[i];
        if(sum > maxi) {
          maxi = sum;
        }
       if(sum < 0) {
          sum = 0;
       } 
    }
   return maxi;
  }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 2nd approach

class Solution {
    public static int maxSubArray(int[] nums){
   int length = nums.length;
        int[] dp = new int[length];
        dp[0] = nums[0];
        int maxOverall = dp[0];
        for(int i =1; i<length; i++){
             dp[i] = Math.max(nums[i],dp[i-1]+nums[i]);
            maxOverall = Math.max(maxOverall,dp[i]);
        }
        return maxOverall;
    }
  
}
